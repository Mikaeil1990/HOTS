//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Room", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Room : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoomNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReference.Player WinnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> movesArrayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReference.Player player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReference.Player player2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoomName {
            get {
                return this.RoomNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomNameField, value) != true)) {
                    this.RoomNameField = value;
                    this.RaisePropertyChanged("RoomName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReference.Player Winner {
            get {
                return this.WinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerField, value) != true)) {
                    this.WinnerField = value;
                    this.RaisePropertyChanged("Winner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> movesArray {
            get {
                return this.movesArrayField;
            }
            set {
                if ((object.ReferenceEquals(this.movesArrayField, value) != true)) {
                    this.movesArrayField = value;
                    this.RaisePropertyChanged("movesArray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReference.Player player1 {
            get {
                return this.player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.player1Field, value) != true)) {
                    this.player1Field = value;
                    this.RaisePropertyChanged("player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReference.Player player2 {
            get {
                return this.player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.player2Field, value) != true)) {
                    this.player2Field = value;
                    this.RaisePropertyChanged("player2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeroField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> infoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hero {
            get {
                return this.HeroField;
            }
            set {
                if ((object.ReferenceEquals(this.HeroField, value) != true)) {
                    this.HeroField = value;
                    this.RaisePropertyChanged("Hero");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> info {
            get {
                return this.infoField;
            }
            set {
                if ((object.ReferenceEquals(this.infoField, value) != true)) {
                    this.infoField = value;
                    this.RaisePropertyChanged("info");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="server", ConfigurationName="ServiceReference.ILogin", CallbackContract=typeof(Client.ServiceReference.ILoginCallback))]
    public interface ILogin {
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/GetData", ReplyAction="server/ILogin/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/GetData", ReplyAction="server/ILogin/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/GetDataUsingDataContract", ReplyAction="server/ILogin/GetDataUsingDataContractResponse")]
        Client.ServiceReference.CompositeType GetDataUsingDataContract(Client.ServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/GetDataUsingDataContract", ReplyAction="server/ILogin/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/Register", ReplyAction="server/ILogin/RegisterResponse")]
        bool Register(string userName, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/Register", ReplyAction="server/ILogin/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string userName, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/Login", ReplyAction="server/ILogin/LoginResponse")]
        bool Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/Login", ReplyAction="server/ILogin/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string userName, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="server/ILogin/sendInf", ReplyAction="server/ILogin/sendInfResponse")]
        void sendInf();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginChannel : Client.ServiceReference.ILogin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference.ILogin>, Client.ServiceReference.ILogin {
        
        public LoginClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LoginClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LoginClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LoginClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LoginClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Client.ServiceReference.CompositeType GetDataUsingDataContract(Client.ServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public bool Register(string userName, string password, string email) {
            return base.Channel.Register(userName, password, email);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string userName, string password, string email) {
            return base.Channel.RegisterAsync(userName, password, email);
        }
        
        public bool Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string userName, string password) {
            return base.Channel.LoginAsync(userName, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="server", ConfigurationName="ServiceReference.IGameRoom", CallbackContract=typeof(Client.ServiceReference.IGameRoomCallback))]
    public interface IGameRoom {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/move")]
        void move(int i);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/move")]
        System.Threading.Tasks.Task moveAsync(int i);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/QuitGameRoom")]
        void QuitGameRoom();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/QuitGameRoom")]
        System.Threading.Tasks.Task QuitGameRoomAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/SendMessage")]
        void SendMessage(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/Connect")]
        void Connect(string roomName, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/Connect")]
        System.Threading.Tasks.Task ConnectAsync(string roomName, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameRoomCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/onTurnChanges")]
        void onTurnChanges(int sefHp, int selfMana, int oppHp, int oppMana);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/onMessageRecieve")]
        void onMessageRecieve(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IGameRoom/onGameEnded")]
        void onGameEnded(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameRoomChannel : Client.ServiceReference.IGameRoom, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameRoomClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference.IGameRoom>, Client.ServiceReference.IGameRoom {
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void move(int i) {
            base.Channel.move(i);
        }
        
        public System.Threading.Tasks.Task moveAsync(int i) {
            return base.Channel.moveAsync(i);
        }
        
        public void QuitGameRoom() {
            base.Channel.QuitGameRoom();
        }
        
        public System.Threading.Tasks.Task QuitGameRoomAsync() {
            return base.Channel.QuitGameRoomAsync();
        }
        
        public void SendMessage(string msg) {
            base.Channel.SendMessage(msg);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string msg) {
            return base.Channel.SendMessageAsync(msg);
        }
        
        public void Connect(string roomName, string username) {
            base.Channel.Connect(roomName, username);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string roomName, string username) {
            return base.Channel.ConnectAsync(roomName, username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="server", ConfigurationName="ServiceReference.IMainPage", CallbackContract=typeof(Client.ServiceReference.IMainPageCallback))]
    public interface IMainPage {
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/AfterLogin", ReplyAction="server/IMainPage/AfterLoginResponse")]
        System.Collections.Generic.List<string> AfterLogin();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/AfterLogin", ReplyAction="server/IMainPage/AfterLoginResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AfterLoginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/QuitGame", ReplyAction="server/IMainPage/QuitGameResponse")]
        void QuitGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/QuitGame", ReplyAction="server/IMainPage/QuitGameResponse")]
        System.Threading.Tasks.Task QuitGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/GetOnlinePlayerNames", ReplyAction="server/IMainPage/GetOnlinePlayerNamesResponse")]
        System.Collections.Generic.List<string> GetOnlinePlayerNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/GetOnlinePlayerNames", ReplyAction="server/IMainPage/GetOnlinePlayerNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetOnlinePlayerNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/GetOnlineGames", ReplyAction="server/IMainPage/GetOnlineGamesResponse")]
        System.Collections.Generic.List<string> GetOnlineGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/GetOnlineGames", ReplyAction="server/IMainPage/GetOnlineGamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetOnlineGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/SendGameRequest", ReplyAction="server/IMainPage/SendGameRequestResponse")]
        bool SendGameRequest(string reqSender, string reqReciever);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/SendGameRequest", ReplyAction="server/IMainPage/SendGameRequestResponse")]
        System.Threading.Tasks.Task<bool> SendGameRequestAsync(string reqSender, string reqReciever);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/ChooseHeroes", ReplyAction="server/IMainPage/ChooseHeroesResponse")]
        Client.ServiceReference.Room ChooseHeroes(string heroName, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/ChooseHeroes", ReplyAction="server/IMainPage/ChooseHeroesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference.Room> ChooseHeroesAsync(string heroName, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/StartRoom", ReplyAction="server/IMainPage/StartRoomResponse")]
        bool StartRoom(Client.ServiceReference.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/StartRoom", ReplyAction="server/IMainPage/StartRoomResponse")]
        System.Threading.Tasks.Task<bool> StartRoomAsync(Client.ServiceReference.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/GetReplays", ReplyAction="server/IMainPage/GetReplaysResponse")]
        string GetReplays();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/GetReplays", ReplyAction="server/IMainPage/GetReplaysResponse")]
        System.Threading.Tasks.Task<string> GetReplaysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/Options", ReplyAction="server/IMainPage/OptionsResponse")]
        bool Options();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/Options", ReplyAction="server/IMainPage/OptionsResponse")]
        System.Threading.Tasks.Task<bool> OptionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainPageCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IMainPage/OnPlayerChange")]
        void OnPlayerChange(System.Collections.Generic.List<string> players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IMainPage/OnRoomChanges")]
        void OnRoomChanges(System.Collections.Generic.List<string> rooms);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/GetName", ReplyAction="server/IMainPage/GetNameResponse")]
        string GetName();
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/OnRecieveRequest", ReplyAction="server/IMainPage/OnRecieveRequestResponse")]
        bool OnRecieveRequest(string reqSender);
        
        [System.ServiceModel.OperationContractAttribute(Action="server/IMainPage/GetSelectedHero", ReplyAction="server/IMainPage/GetSelectedHeroResponse")]
        string GetSelectedHero();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IMainPage/OnStartGame")]
        void OnStartGame(Client.ServiceReference.Room room);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="server/IMainPage/GameEnded")]
        void GameEnded();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainPageChannel : Client.ServiceReference.IMainPage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainPageClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference.IMainPage>, Client.ServiceReference.IMainPage {
        
        public MainPageClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MainPageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MainPageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MainPageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MainPageClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<string> AfterLogin() {
            return base.Channel.AfterLogin();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AfterLoginAsync() {
            return base.Channel.AfterLoginAsync();
        }
        
        public void QuitGame() {
            base.Channel.QuitGame();
        }
        
        public System.Threading.Tasks.Task QuitGameAsync() {
            return base.Channel.QuitGameAsync();
        }
        
        public System.Collections.Generic.List<string> GetOnlinePlayerNames() {
            return base.Channel.GetOnlinePlayerNames();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetOnlinePlayerNamesAsync() {
            return base.Channel.GetOnlinePlayerNamesAsync();
        }
        
        public System.Collections.Generic.List<string> GetOnlineGames() {
            return base.Channel.GetOnlineGames();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetOnlineGamesAsync() {
            return base.Channel.GetOnlineGamesAsync();
        }
        
        public bool SendGameRequest(string reqSender, string reqReciever) {
            return base.Channel.SendGameRequest(reqSender, reqReciever);
        }
        
        public System.Threading.Tasks.Task<bool> SendGameRequestAsync(string reqSender, string reqReciever) {
            return base.Channel.SendGameRequestAsync(reqSender, reqReciever);
        }
        
        public Client.ServiceReference.Room ChooseHeroes(string heroName, string playerName) {
            return base.Channel.ChooseHeroes(heroName, playerName);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference.Room> ChooseHeroesAsync(string heroName, string playerName) {
            return base.Channel.ChooseHeroesAsync(heroName, playerName);
        }
        
        public bool StartRoom(Client.ServiceReference.Room room) {
            return base.Channel.StartRoom(room);
        }
        
        public System.Threading.Tasks.Task<bool> StartRoomAsync(Client.ServiceReference.Room room) {
            return base.Channel.StartRoomAsync(room);
        }
        
        public string GetReplays() {
            return base.Channel.GetReplays();
        }
        
        public System.Threading.Tasks.Task<string> GetReplaysAsync() {
            return base.Channel.GetReplaysAsync();
        }
        
        public bool Options() {
            return base.Channel.Options();
        }
        
        public System.Threading.Tasks.Task<bool> OptionsAsync() {
            return base.Channel.OptionsAsync();
        }
    }
}
